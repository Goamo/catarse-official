import {
    brushSettings,
    brushType,
    setBrushType as setGlobalBrushType,
    setBrushColor,
    setBrightness,
    setContrast
} from './globals.js';

// === –ü—Ä–∏–º–∏—Ç–∏–≤—ã ===
const primitives2D = [
    { type: 'square', label: '–ö–≤–∞–¥—Ä–∞—Ç', icon: '‚ñ°' },
    { type: 'rectangle', label: '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫', icon: '‚ñ≠' },
    { type: 'triangle', label: '–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫', icon: '‚ñ≥' },
    { type: 'equilateralTriangle', label: '–†–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫', icon: '‚ñ≤' },
    { type: 'circle', label: '–ö—Ä—É–≥', icon: '‚óã' },
    { type: 'ellipse', label: '–≠–ª–ª–∏–ø—Å', icon: '‚≠ï' },
    { type: 'star', label: '–ó–≤–µ–∑–¥–∞', icon: '‚òÖ' },
    { type: 'hexagon', label: '–®–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫', icon: '‚¨°' },
    { type: 'semicircle', label: '–ü–æ–ª—É–∫—Ä—É–≥', icon: '‚óó' },
    { type: 'ring', label: '–ö–æ–ª—å—Ü–æ', icon: '‚óé' },
];

const primitives3D = [
    { type: 'cube', label: '–ö—É–±', icon: '‚¨õ' },
    { type: 'sphere', label: '–°—Ñ–µ—Ä–∞', icon: '‚ö´' },
    { type: 'cylinder', label: '–¶–∏–ª–∏–Ω–¥—Ä', icon: '‚¨§' },
    { type: 'cone', label: '–ö–æ–Ω—É—Å', icon: '‚ñ≤' },
    { type: 'torus', label: '–¢–æ—Ä', icon: '‚≠ï' },
    { type: 'plane', label: '–ü–ª–æ—Å–∫–æ—Å—Ç—å', icon: '‚ñ≠' },
];

// === –ü–∞–Ω–µ–ª—å –∫–∏—Å—Ç–µ–π ===
export function toggleBrushDropdown() {
    const dropdown = document.getElementById("brushDropdown");
    dropdown.style.display =
        dropdown.style.display === "none" ? "block" : "none";
}

export function toggleBrushSettings() {
    const dropdown = document.getElementById("brushSettingsDropdown");
    dropdown.style.display =
        dropdown.style.display === "none" ? "block" : "none";
}

export function setBrushType(type) {
    setGlobalBrushType(type);
    document.querySelectorAll('.brush-item').forEach(item => {
        item.classList.remove('active');
        if (item.dataset.brushType === type) {
            item.classList.add('active');
        }
    });
}

export function updateBrushThickness(value) {
    const currentBrush = brushSettings[brushType];
    if (currentBrush) {
        currentBrush.thickness = parseInt(value);
    }
}

export function setColor(value) {
    setBrushColor(value);
}

export function updateOpacity(value) {
    const currentBrush = brushSettings[brushType];
    if (currentBrush) {
        currentBrush.opacity = parseInt(value) / 100;
    }
}

export function updateBrightness(value) {
    setBrightness(value);
}

export function updateContrast(value) {
    setContrast(value);
}

// === –ü–∞–Ω–µ–ª—å –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤ ===
export function toggleMeshDropdown() {
    const category = document.getElementById("meshCategorySelect");
    const list = document.getElementById("meshDropdown");

    if (category.style.display === "none") {
        category.style.display = "block";
        list.style.display = "none";
    } else {
        category.style.display = "none";
        list.style.display = "none";
    }
}

export function showMeshList(type) {
    const meshDropdown = document.getElementById('meshDropdown');
    const category = document.getElementById('meshCategorySelect');
    category.style.display = 'none';
    meshDropdown.style.display = 'block';
    meshDropdown.innerHTML = '';

    const closeButton = document.createElement('span');
    closeButton.className = 'close-btn';
    closeButton.innerHTML = '√ó';
    closeButton.onclick = toggleMeshDropdown;
    meshDropdown.appendChild(closeButton);

    const colorLabel = document.createElement('label');
    colorLabel.htmlFor = 'primitiveColor';
    colorLabel.textContent = 'üé® –¶–≤–µ—Ç —Ñ–∏–≥—É—Ä—ã:';
    colorLabel.style.display = 'block';
    colorLabel.style.marginTop = '10px';

    const colorInput = document.createElement('input');
    colorInput.type = 'color';
    colorInput.id = 'primitiveColor';
    colorInput.value = '#0077ff';
    colorInput.style.marginBottom = '10px';

    meshDropdown.appendChild(colorLabel);
    meshDropdown.appendChild(colorInput);

    const title = document.createElement('div');
    title.textContent = (type === '2D' ? '2D' : '3D') + ' –ü—Ä–∏–º–∏—Ç–∏–≤—ã';
    title.style.marginTop = '10px';
    title.style.fontWeight = 'bold';
    meshDropdown.appendChild(title);

    const list = type === '2D' ? primitives2D : primitives3D;

    list.forEach(({ type, label, icon }) => {
        const div = document.createElement('div');
        div.className = 'mesh-item';
        div.title = label;
        div.innerHTML = icon;
        div.onclick = () => insertPrimitive(type);
        meshDropdown.appendChild(div);
    });
}

// === –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML ===
window.showMeshList = showMeshList;
